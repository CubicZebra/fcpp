name: C/CPP CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CONAN_HOME: ${{ github.workspace }}/conan_home

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.os }}, ${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        build_type: [Debug, Release]
        exclude:
          - os: windows-latest
            build_type: Debug
          - os: macos-latest
            build_type: Debug

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Conan
        run: |
          pip install conan

      - name: Configure Conan
        run: |
          echo "CONAN_HOME=${{ env.CONAN_HOME }}" >> $GITHUB_ENV
          conan profile detect --force

      - name: System dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt install -y libnsl-dev

      - name: Setup LLVM & Inject dlib patch (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          HOMEBREW_PREFIX=$(brew --prefix)
          brew install llvm || true
          
          # select path for compilers
          echo "CC=$HOMEBREW_PREFIX/opt/llvm/bin/clang" >> $GITHUB_ENV
          echo "CXX=$HOMEBREW_PREFIX/opt/llvm/bin/clang++" >> $GITHUB_ENV
          echo "$HOMEBREW_PREFIX/opt/llvm/bin" >> $GITHUB_PATH
          
          # write CXXFLAGS into GITHUB_ENV, for following steps
          echo 'CXXFLAGS=-D''char_traits_uint_injected=namespace std {
            template<> struct char_traits<unsigned int> {
              using char_type = unsigned int; using int_type = long;
              static size_t length(const char_type* s) { size_t n=0; while(s[n])++n; return n; }
              static char_type* copy(char_type* d,const char_type* s,size_t c) { std::memmove(d,s,c*sizeof(char_type)); return d; }
              static char_type* assign(char_type* p,size_t c,char_type a) { for(size_t i=0;i<c;++i)p[i]=a; return p; }
              static bool eq(char_type a,char_type b) { return a==b; }
              static bool lt(char_type a,char_type b) { return a<b; }
              static int compare(const char_type* s1,const char_type* s2,size_t c) {
                for(size_t i=0;i<c;++i) { if(s1[i]<s2[i]) return -1; if(s1[i]>s2[i]) return 1; } return 0;
              }
              static const char_type* find(const char_type* s,size_t c,const char_type& a) {
                for(size_t i=0;i<c;++i) if(s[i]==a) return s+i; return nullptr;
              }
              static char_type to_char_type(const int_type& c) { return static_cast<char_type>(c); }
              static int_type to_int_type(const char_type& c) { return static_cast<int_type>(c); }
              static bool eq_int_type(const int_type& a,const int_type& b) { return a==b; }
              static int_type eof() { return static_cast<int_type>(-1); }
              static int_type not_eof(const int_type& e) { return e == eof() ? 0 : e; }
            };}'' -include <string> -include <cstring>' >> $GITHUB_ENV
          
          # re-detect conan profile
          conan profile detect --force

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ${{ env.CONAN_HOME }}
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.py', 'conan.lock') }}
          restore-keys: |
            conan-${{ runner.os }}-

      - name: Build and test with Conan
        run: |
          conan create . -pr:b=default -pr:h=default -s build_type=${{ matrix.build_type }} --build=missing
        timeout-minutes: 30

      - name: Clean up test_package builds
        run: |
          python ./test_package/conanfile.py

      - name: Clean up Conan packages
        if: always()
        run: |
          conan remove "fcpp/*" --confirm

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install documentation dependencies
        run: |
          sudo apt install -y doxygen graphviz
          pip install numpy sphinx sphinx-intl

      - name: Build documentation
        run: |
          python ./docs/build.py